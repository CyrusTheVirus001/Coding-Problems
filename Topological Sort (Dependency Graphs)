#
#ALGORITH TO CHECK GRAPH FOR CYCLES
#

d_graph = [[1,2],[3],[],[2]]
def dependency_order(g):
  order = []
  for i in range(len(g)-1):
    visit_list = set()
    if(dfs(i,g,visit_list,order) == False):return ['x']

  return order

def dfs(node,graph,visit_list,order_list):

  if node in visit_list:
    if len(graph[node]) != 0:
      return False
  else:
    visit_list.add(node)

  if node in order_list:
    return True

  if len(graph[node]) == 0:
    order_list.append(node)
    return True

  for child in graph[node]:
    if(dfs(child,graph,visit_list,order_list) == False): 
     return False

  graph[node].clear()
  if node not in order_list:
    order_list.append(node)

#
# BASIC TOPOLOGICAL SORT FOR DIRECTED GRAPHS ONLY (NO CYCLES)
#

def DFS(node,graph,visit_list,order_list):
  visit_list.add(node)

  for i in graph[node]:
    if i not in visit_list:
      DFS(i,graph,visit_list,order_list)

  order_list.append(node)

def Find_Dependencies(graph):
  visit_list = set()
  order = []

  for i in graph:
    if i not in visit_list:
      DFS(i,graph,visit_list,order)

  return order
